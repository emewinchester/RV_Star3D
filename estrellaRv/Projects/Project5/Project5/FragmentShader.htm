#version 400

 in vec3 Position;
 in vec3 Normal;

 uniform mat4 ViewMatrix;

 struct LightInfo
 {
	vec3 Ldir;
	vec3 La;
	vec3 Ld;
	vec3 Ls;
 };
 uniform LightInfo Light;

 struct MaterialInfo
 {
	vec3 Ka;
	vec3 Kd;
	vec3 Ks;
	float Shininess;
 };
 uniform MaterialInfo Material;

 out vec4 FragColor;

 vec3 ads()
 {
  	vec4 s4 = ViewMatrix*vec4(Light.Ldir, 0.0);
	vec3 n = normalize(Normal);
	vec3 v = normalize(-Position);
	vec3 s = normalize(-vec3(s4));
	vec3 r = reflect(-s, n);
	float dRate = max(dot(s, n), 0.0);
	float sRate = pow(max(dot(r, v), 0.0), Material.Shininess);
	vec3 ambient = Light.La * Material.Ka;
	vec3 difusse = Light.Ld * Material.Kd * dRate;
	vec3 specular = Light.Ls * Material.Ks * sRate;
	return ambient + difusse + specular;
 }

 void main()
 {
	vec3 Color = ads();
	FragColor = vec4(Color,1.0);
 }